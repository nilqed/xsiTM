(define (xsi-verbatim-serialize lan t)
  (import-from (utils plugins plugin-cmd))
  (with u (pre-serialize lan t)   
    (string-append "(math: \"" (escape-verbatim (texmacs->code u)) "\")\n")))


(define (xsi-serialize lan t)
  (import-from (utils plugins plugin-cmd))
  (import-from (utils plugins plugin-convert))
  (with s (if (in-math?)
     (xsi-verbatim-serialize lan t) 
        (verbatim-serialize lan t))	
	s))
  

(define (xsi-auto-parenthesis)
  (insert "()") (emulate-keyboard "left"))

(kbd-map
(:require (in-xsi?))
("(" (xsi-auto-parenthesis)))


(plugin-configure xsi
  (:require #t)
  (:launch "tmclips")
  ;(:test-input-done #t)
  (:serializer ,xsi-serialize)
  (:session "XSI"))


(define (xsi-input-rsub args)
    (import-from (utils plugins plugin-convert))
    (display " @subB ")
    (plugin-input (car args))
    (display " @subE "))

(define (xsi-input-rsup args)
    (import-from (utils plugins plugin-convert))
    (display " @supB ")
    (plugin-input (car args))
    (display " @supE "))   

(define (xsi-input-label args)
    (import-from (utils plugins plugin-convert))
    (display " @labelB ")
    (plugin-input (car args))
    (display " @labelE "))

(define (xsi-input-reference args)
    (import-from (utils plugins plugin-convert))
    (display " @referenceB ")
    (plugin-input (car args))
    (display " @referenceE "))

(define (xsi-input-proof args)
    (import-from (utils plugins plugin-convert))
    (display " @proofB ")
    (plugin-input (car args))
    (display " @proofE "))

(define (xsi-input-definition args)
    (import-from (utils plugins plugin-convert))
    (display " @definitionB ")
    (plugin-input (car args))
    (display " @definitionE "))

(define (xsi-input-theorem args)
    (import-from (utils plugins plugin-convert))
    (display " @theoremB ")
    (plugin-input (car args))
    (display " @theoremE "))

(define (xsi-input-lemma args)
    (import-from (utils plugins plugin-convert))
    (display " @lemmaB ")
    (plugin-input (car args))
    (display " @lemmaE "))

(define (xsi-input-proposition args)
    (import-from (utils plugins plugin-convert))
    (display " @propositionB ")
    (plugin-input (car args))
    (display " @propositionE "))





 (plugin-input-converters xsi
   (rsub xsi-input-rsub)
   (rsup xsi-input-rsup)
   (label xsi-input-label)
   (reference xsi-input-reference)
   (definition xsi-input-definition)
   (theorem xsi-input-theorem)
   (lemma xsi-input-lemma)
   (proposition xsi-input-proposition)
   (proof xsi-input-proof)
   ("("              " @lpar ")
   (")"              " @rpar ") 
   ("["              " @lbrack ")
   ("]"              " @rbrack ")
   ("{"              " @lbrace ")
   ("}"              " @rbrace ")   
   (">"              " @gt ")
   ("<"              " @lt ")
   ("="              " @eq ")
   ("*"              " @mult ")
   ("+"              " @plus ") 
   ("-"              " @minus ")
   ("/"              " @slash ") 
   (","              " @comma ")
   ("."              " @dot   ")
   (":"              " @colon ")
   (":="             " @assign ")
   ("<langle>"       " @langle ")
   ("<rangle>"       " @rangle ")
   ("<ldots>"        " @ldots ")
   ("<cdots>"        " @cdots ")  
   ("<in>"           " @in ")
   ("<cap>"          " @cap ")
   ("<cup>"          " @cup ")
   ("<subset>"       " @subset ")
   ("<mapsto>"       " @mapsto ")
   ("<leftarrow>"    " @leftarrow ")
   ("<rightarrow>"   " @rightarrow ")
   ("<vee>"          " @vee ")
   ("<neg>"          " @neg ")
   ("<equiv>"        " @equiv ")
   ("<circ>"         " @circ ")
   ("<star>"         " @star ")
   ("<neq>"          " @neq ")
   ("<leq>"          " @leq ")
   ("<geq>"          " @geq ")
   ("<leqslant>"     " @leq ")
   ("<geqslant>"     " @geq ")
   ("<times>"        " @times ")
   ("<wedge>"        " @wedge ")
   ("<forall>"       " @forall ")
   ("<exists>"       " @exists ")
   ("<partial>"      " @partial ")
   ("<emptyset>"     " @emptyset ")
   ;
   ("<bbb-A>" "@AA")
   ("<bbb-B>" "@BB")
   ("<bbb-C>" "@CC")
   ("<bbb-D>" "@DD")
   ("<bbb-E>" "@EE")
   ("<bbb-F>" "@FF")
   ("<bbb-G>" "@GG")
   ("<bbb-H>" "@HH")
   ("<bbb-I>" "@II")
   ("<bbb-J>" "@JJ")
   ("<bbb-K>" "@KK")
   ("<bbb-L>" "@LL")
   ("<bbb-M>" "@MM")
   ("<bbb-N>" "@NN")
   ("<bbb-O>" "@OO")
   ("<bbb-P>" "@PP")
   ("<bbb-Q>" "@QQ")
   ("<bbb-R>" "@RR")
   ("<bbb-S>" "@SS")
   ("<bbb-T>" "@TT")
   ("<bbb-U>" "@UU")
   ("<bbb-V>" "@VV")
   ("<bbb-W>" "@WW")
   ("<bbb-X>" "@XX")
   ("<bbb-Y>" "@YY")
   ("<bbb-Z>" "@ZZ"))
   
   
   
;;; (deffunction math: (?x) ?x)
;;; \assign x 2 => \x ->> 2




